{
    "useTabs": false,
    "printWidth": 80,
    "tabWidth": 4,
    "singleQuote": false,
    "jsxSingleQuote": false,
    "trailingComma": "none",
    "bracketSameLine": false,
    "semi": true,
    "rcVerbose": true,
    "quoteProps": "consistent",
    "bracketSpacing": true,
    "arrowParens": "always",
    "endOfLine": "lf"
}



// https://prettier.io/docs/en/options.html
{
    "useTabs": false,      // Indent lines with tabs instead of spaces.
    "printWidth": 80,      // Specify the length of line that the printer will wrap on.
    "tabWidth": 2,         // Specify the number of spaces per indentation-level.
    "singleQuote": false,  // Use single quotes instead of double quotes.
    jsxSingleQuote: false, // Use single quotes instead of double quotes in JSX.
    /**
     * Print trailing commas wherever possible.
     * Valid options:
     *   - "none" - no trailing commas
     *   - "es5" - trailing commas where valid in ES5 (objects, arrays, etc)
     *   - "all" - trailing commas wherever possible (function arguments)
     */
    "trailingComma": "none",
    /**
     * Do not print spaces between brackets.
     * If true, puts the > of a multi-line element at the end of the last line instead of being
     * alone on the next line
     */
    "bracketSameLine": false,
    /**
     * Specify which parse to use.
     * Prettier automatically infers the parser from the input file path, so you shouldnâ€™t have to change this setting.
     * Valid options:
     *   - "flow"
     *   - "babylon" (default
     * etc...
     */
    "parser": "babel",
    /**
     * Do not print semicolons, except at the beginning of lines which may need them.
     * Valid options:
     * - true - add a semicolon at the end of every line
     * - false - only add semicolons at the beginning of lines that may introduce ASI failures
     */
    "semi": true,
    /**
     * Add additional logging from prettierrc (not prettier itself).
     * Defaults to false
     * Valid options:
     * - true - enable additional logging
     * - false - disable additional logging
     */
    "rcVerbose": true,
    /**
     * Change when properties in objects are quoted.
     * Valid options:
     * "as-needed" - Only add quotes around object properties where required.
     * "consistent" - If at least one property in an object requires quotes, quote all properties.
     * "preserve" - Respect the input use of quotes in object properties.
     */
    "quoteProps": "consistent",
    "bracketSpacing": true, //default true
    "arrowParens": "<always|avoid>",
    
    /**
    * These two options can be used to format code starting and ending at a given character offset (inclusive and exclusive, respectively). The range will extend:
    * -Backwards to the start of the first line containing the selected statement.
    * -Forwards to the end of the selected statement.
    * These options cannot be used with cursorOffset
    */
    "rangeStart": "<int>", //default 0
    "rangeEnd": "<int>", //default infinity
    
    
    /**
    * Prettier can restrict itself to only format files that contain a special comment, called a pragma, at the top of the file. This is very useful when gradually transitioning large, unformatted codebases to Prettier.
    * A file with the following as its first comment will be formatted when --require-pragma is supplied:

    * /**
    * * @prettier
    * */

    * or

    * /**
    * * @format
    * */
    "requirePragma": "<bool>",
    
   "insertPragma": "<bool>",
   endOfLine: "<lf|crlf|cr|auto>",
   embeddedLanguageFormatting: "<off|auto>",
   singleAttributePerLine: <bool> //default false    // enforces single attribute per line in HTML and JSX
}
