{
  "compilerOptions": {

    /* Basic Options */                       
    "target": "es5",                       /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', or 'ESNEXT'. */
    "module": "commonjs",                  /* Specify module code generation: 'commonjs', 'amd', 'system', 'umd' or 'es2015'. */
    "lib": [],                             /* Specify library files to be included in the compilation:  */
    "allowJs": true,                       /* Allow JavaScript files to be compiled. */
    "checkJs": true,                       /* Report errors in .js files. */
    "jsx": "preserve",                     /* Specify JSX code generation: 'preserve', 'react-native', or 'react'. */
    "declaration": true,                   /* Generates corresponding '.d.ts' file. */
    "sourceMap": true,                     /* Generates corresponding '.map' file. */
    "outFile": "./",                       /* Concatenate and emit output to single file. */
    "outDir": "./",                        /* Redirect output structure to the directory. */
    "rootDir": "./",                       /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */
    "removeComments": true,                /* Do not emit comments to output. */
    "noEmit": true,                        /* Do not emit outputs. */
    "importHelpers": true,                 /* Import emit helpers from 'tslib'. */
    "downlevelIteration": true,            /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */
    "isolatedModules": true,               /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */

    /* Strict Type-Checking Options */        
    "strict": true,                        /* Enable all strict type-checking options. */
    "noImplicitAny": true,                 /* Raise error on expressions and declarations with an implied 'any' type. */
    "strictNullChecks": true,              /* Enable strict null checks. */
    "noImplicitThis": true,                /* Raise error on 'this' expressions with an implied 'any' type. */
    "alwaysStrict": true,                  /* Parse in strict mode and emit "use strict" for each source file. */

    /* Additional Checks */                   
    "noUnusedLocals": true,                /* Report errors on unused locals. */
    "noUnusedParameters": true,            /* Report errors on unused parameters. */
    "noImplicitReturns": true,             /* Report error when not all code paths in function return a value. */
    "noFallthroughCasesInSwitch": true,    /* Report errors for fallthrough cases in switch statement. */

    /* Module Resolution Options */           
    "moduleResolution": "node",            /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */
    "baseUrl": "./",                       /* Base directory to resolve non-absolute module names. */
    "paths": {},                           /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */
    "rootDirs": [],                        /* List of root folders whose combined content represents the structure of the project at runtime. */
    "typeRoots": [],                       /* List of folders to include type definitions from. */
    "types": [],                           /* Type declaration files to be included in compilation. */
    "allowSyntheticDefaultImports": true,  /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */

    /* Source Map Options */                  
    "sourceRoot": "./",                    /* Specify the location where debugger should locate TypeScript files instead of source locations. */
    "mapRoot": "./",                       /* Specify the location where debugger should locate map files instead of generated locations. */
    "inlineSourceMap": true,               /* Emit a single file with source maps instead of having a separate file. */
    "inlineSources": true,                 /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */

    /* Experimental Options */                
    "experimentalDecorators": true,        /* Enables experimental support for ES7 decorators. */
    "emitDecoratorMetadata": true          /* Enables experimental support for emitting type metadata for decorators. */
  }
}


{
  "extends: "./tsconfig.base", // Il est possible de faire de l'héritage de fichier tsconfig.js
  "compilerOptions": { // contient toutes les rêgles permettant de configurer la compilation de notre projet Typescript
    "allowJs": false,
    "allowSyntheticDefaultImports": false,
    "allowUnreachableCode": false,
    "allowUnusedLabels": false,
    "outDir": "./dist", // Dossier dans lequel sera contenu l'output de la compilation
    "noEmitOnError": true, // Recommandé. Ne crée pas de fichier d'output s'il y a une erreur Typescript
    "declaration": true, // permet de générer le fichier de déclaration (*.d.ts) pour créer des libs/packages importable dans d'autres projets par exemple
    "declarationDir": "./typings", // Spécifie le dossier dans lequel seront générés les fichiers *.d.ts
    "stripInternal": true, // Si l'annotation /** @internal */ est présente au-dessus d'une fonction, le fichier de *.d.ts généré ne contiendra pas de déclaration pour cette fonction
    "sourceMap": true, // Permet de générer les fichier *.map
    "inlineSources": true, // Permet d'inclure le code source Typescript dans les sourcemap
    "mapRoot": "./source-maps", // Spécifie le dossier dans lequel seront générés les fichiers sourceMaps
    "inlineSourcesMap": true, // Génére le contenu du sourceMap au format base64 inclus dans le fichier transpilé *.js
    "noImplicitAny": true, // Indispensable, sans quoi il suffit de faire du JS. Indique à Typescript que l'on ne veut pas type any implicite automatiquement ajouté
    "strictNullChecks": true, // Indispensable, sans quoi il suffit de faire du JS. undefined et null sont historiquement des sous-types de tous les types. Il faut donc faire en sorte qu'ils soient considérés comme des types à part entière. 
    "suppressImplicitAnyIndexError": false, // Recommandé à false. Si à true, on n'aurait pas d'erreur de compilation lorsqu'on voudrait ajouter un attribut à un objet dont le type n'a pas été définit dès le départ
    "suppressExcessPropertyErrors": false, // Recommandé à false. Si à true, on pourrait avoir des attributs facultatifs non déclarés dans les interface et ne pas avoir d'erreur de compilation
    "allowUnreachableCode": false, // Recommandé à false. Protège des code morts par exemple un return; puis du code
    "allowUnusedLabels": false, // Recommandé à false. Si un label n'est pas utilisée on aura une erreur de compilation 
    "noUnusedLocals": true, // Recommandé à true. Idem. Si une variable déclarée n'est pas utilisée on aura une erreur lors de la compilation
    "noUnusedParameters": true, // Recommandé à true. Idem. Si un paramètre d'une fonction n'est pas utilisé on aura une erreur lors de la compilation
    "noFallthroughCasesInSwitch" : true, // Personnellement j'ai bien. Ce paramètre force à utiliser un break; après être passé dans un case d'un switch.
    "noImplicitReturns": true, // Assez clair. Il faut absolument spécifier les return dans les fonctions; même les undefined. En effet "return undefined" doit être spécifié même dans les fonctions qui ne retournent rien
    "module": "es2015", // Définit la manière dont sont chargé les modules. Les instructions import et export sont préservées dans le JS généré avec es2015. 
    "target": "es2015", // Définit la version de JS dans lequel sera transpilé le code Typescript (en dehors de la gestion des modules)
    "moduleResolution": "node", // On gère les imports comme en NodeJS
    "traceResolution": true, // Ajoute des informations de debugging sur l'import des modules lors de la compilation Typescript
    "diagnostics": false, // Affiche des informations de debugging permettant d'optimiser éventuellement la performance de la compilation
    "listFiles": false, // Affiche les fichiers Typescript transpilés
    "listEmittedFiles": false, // Affiche les fichiers JS générés lors de la compilation
    "noImplicitUseStrict": false,
    "alwaysStrict": true, // Tous les fichiers modules ou globaux (sans import ou export) seront considérés comme des fichiers en strict mode
    "skipLibCheck": true // pour les libs comme Angular
    "removeComments": true, // Retire les commentaires
    "experimentalDecorators": true // Permet de créer ses propres décorateurs
  },
  "exclude": [], // Permet d'exclure des paths de la compilation (cf. node_modules, tmp_file, "src/**/*.tmp")
  "include": [], // idem que exclude mais l'inverse. Permet d'inclure des paths dans la compilation. 
  "files": [], // Permet de dire au compilateur quels paths charger. Cette config est prioritaire sur include et exclude
  "typeAcquisition": { // permet de configurer l'auto-complete et le type-checking des modules externes
    "enable": false
  },
  "compileOnSave": false,
  "atom": { // Atom ajoute ses propres propriétés. On peut les modifier

  },
  "angularCompilerOptions": { // Pour configurer les applications Angular

  }
}
